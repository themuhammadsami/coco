// Prisma schema for CoConsult

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ServiceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String?
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       Int
  documents    Document[]
  services     UserService[]
  transactions Transaction[]
  messages     Message[]     @relation("MessageSender")
  auditLogs    AuditLog[]
  createdAt    DateTime      @default(now())
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Service {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  price       Int?
  active      Boolean      @default(true)
  userRecords UserService[]
}

model UserService {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  service   Service       @relation(fields: [serviceId], references: [id])
  serviceId Int
  status    ServiceStatus @default(PENDING)
  createdAt DateTime      @default(now())
}

model Document {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  type        DocumentType   @relation(fields: [typeId], references: [id])
  typeId      Int
  url         String
  status      DocumentStatus @default(PENDING)
  hash        String?
  verifiedBy  User?          @relation("DocumentVerifier", fields: [verifiedById], references: [id])
  verifiedById String?
  createdAt   DateTime       @default(now())
}

model DocumentType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  documents Document[]
}

model Purpose {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  transactions Transaction[]
}

model Transaction {
  id          Int              @id @default(autoincrement())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  amount      Decimal          @db.Decimal(10, 2)
  currency    String
  status      TransactionStatus @default(PENDING)
  purpose     Purpose          @relation(fields: [purposeId], references: [id])
  purposeId   Int
  processedBy User?            @relation("TransactionProcessor", fields: [processedById], references: [id])
  processedById String?
  createdAt   DateTime         @default(now())
}

model Conversation {
  id        Int       @id @default(autoincrement())
  user      User      @relation("UserConversation", fields: [userId], references: [id])
  userId    String
  staff     User?     @relation("StaffConversation", fields: [staffId], references: [id])
  staffId   String?
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
}

model Booking {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  staff       User?        @relation("BookingStaff", fields: [staffId], references: [id])
  staffId     String?
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
}

model Notification {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  title     String
  body      String
  readAt    DateTime?
  createdAt DateTime  @default(now())
}

model AuditLog {
  id        Int       @id @default(autoincrement())
  actor     User      @relation(fields: [actorId], references: [id])
  actorId   String
  action    String
  ipAddress String
  role      String
  metadata  Json?
  hash      String?
  createdAt DateTime  @default(now())
}
